package entities;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;


@Entity
public class Projet {
	@Id @GeneratedValue
	private int idProjet;
	private String titreProjet;
	@Column(columnDefinition = "TEXT")
	private String description;
	private int montantDemande;
	@Column(columnDefinition = "TEXT")
	private String butArgent;
	private Calendar dateCreation;
	private Calendar dateFin;
	private int montantInvesti;
	private boolean enAvant;

	private int aime;

	private String image;
		
	@OneToMany(mappedBy="projet", cascade={CascadeType.PERSIST, CascadeType.REMOVE})
	private List<Tranche> trancheList;
	
	@OneToMany(mappedBy="projet", cascade={CascadeType.PERSIST, CascadeType.REMOVE})
	private List<Conversation> conversationList;
	
	@ManyToOne
	private FinanceurPorteur porteur;
	
	@ManyToOne
	private Categorie categorie;
	
	@ManyToMany(mappedBy="projetList", cascade={CascadeType.PERSIST})
	private List<Tag> tagList;
	

	/* ************* *
	 *  Constructeur 
	 * ************* */
	
	public Projet() {
		conversationList = new ArrayList<Conversation>();
		trancheList = new ArrayList<Tranche>();
		tagList = new ArrayList<Tag>();
	}
	
	public void creerConversation(AUtilisateur emetteur, String message) {
		Conversation conversation = new Conversation();
		conversation.addMessage(new Message(message, emetteur));
		conversationList.add(conversation);
		conversation.setProjet(this);
		conversation.setEmetteur(emetteur);
	}
	
	public void removeConversation(Conversation conversation) {
		conversationList.remove(conversation);
		conversation.setProjet(null);
	}
	
	public void investir(int sommeInvestie, FinanceurPorteur financeur) {
		Investissement investissement = new Investissement(sommeInvestie, financeur);
		Collections.sort(trancheList);
		this.montantInvesti = montantInvesti + sommeInvestie;
		if (sommeInvestie >= trancheList.get(trancheList.size()-1).getMontantTranche()) {
			trancheList.get(trancheList.size()-1).addInvestissement(investissement);
		} else {
			for (int i = 1; i < trancheList.size(); i++) {
				if (sommeInvestie < trancheList.get(i).getMontantTranche()) {
					trancheList.get(i-1).addInvestissement(investissement);
					break;
				}
			}
		}
		financeur.setMontantAInvestir(financeur.getMontantAInvestir() - sommeInvestie);
	}
	
	public void addTranche(Tranche tranche) {
		this.trancheList.add(tranche);
		tranche.setProjet(this);
	}
	
	public void removeTranche(Tranche tranche) {
		this.trancheList.remove(tranche);
		tranche.setProjet(null);
	}
	
	public void addTag(Tag tag) {
		this.tagList.add(tag);
		tag.getProjeList().add(this);
	}
	
	public void removeTag(Tag tag) {
		this.tagList.remove(tag);
		tag.getProjeList().remove(this);
	}
	
	public void removeAllTag() {
		for(Tag tag : tagList) {
			tag.getProjeList().remove(this);
		}
		tagList = new ArrayList<Tag>();
	}
	
	/* ***************** *
	 *  Getter et Setter *
	 * ***************** */

	public int getIdProjet() {
		return idProjet;
	}

	public void setIdProjet(int idProjet) {
		this.idProjet = idProjet;
	}

	public String getTitreProjet() {
		return titreProjet;
	}

	public void setTitreProjet(String titreProjet) {
		this.titreProjet = titreProjet;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public int getMontantDemande() {
		return montantDemande;
	}

	public void setMontantDemande(int montantDemande) {
		this.montantDemande = montantDemande;
	}

	public String getButArgent() {
		return butArgent;
	}

	public void setButArgent(String butArgent) {
		this.butArgent = butArgent;
	}

	public List<Tranche> getTrancheList() {
		return trancheList;
	}

	public void setTrancheList(List<Tranche> trancheSet) {
		this.trancheList = trancheSet;
	}


	public FinanceurPorteur getPorteur() {
		return porteur;
	}

	public void setPorteur(FinanceurPorteur porteur) {
		this.porteur = porteur;
	}

	public Categorie getCategorie() {
		return categorie;
	}

	public void setCategorie(Categorie categorie) {
		this.categorie = categorie;
	}

	public Calendar getDateCreation() {
		return dateCreation;
	}

	public void setDateCreation(Calendar dateCreation) {
		this.dateCreation = dateCreation;
	}

	public Calendar getDateFin() {
		return dateFin;
	}

	public void setDateFin(Calendar dateFin) {
		this.dateFin = dateFin;
	}

	public int getMontantInvesti() {
		return montantInvesti;
	}

	public void setMontantInvesti(int montantInvesti) {
		this.montantInvesti = montantInvesti;
	}

	
	public int getAime() {
		return aime;
	}

	public void setAime(int like) {
		this.aime = like;
	}

	public boolean isEnAvant() {
		return enAvant;
	}

	public void setEnAvant(boolean enAvant) {
		this.enAvant = enAvant;
	}

	
	public List<Conversation> getConversationList() {
		return conversationList;
	}

	public void setConversationList(List<Conversation> conversationList) {
		this.conversationList = conversationList;
	}
	
	public List<Tag> getTagList() {
		return tagList;
	}

	public void setTagList(List<Tag> tagList) {
		this.tagList = tagList;
	}
	
	public String getImage() {
		return image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	public List<FinanceurPorteur> getFinanceurList() {
		List<FinanceurPorteur> financeurList = new ArrayList<FinanceurPorteur>();
		for(Tranche tranche : trancheList) {
			for(Investissement investissement : tranche.getInvestissementList()) {
				if (!financeurList.contains(investissement.getFinanceur())) {
					financeurList.add(investissement.getFinanceur());
				}
			}
		}
		return financeurList;
	}

	public String getFrenchDate() {
		SimpleDateFormat formater = new SimpleDateFormat("dd-MM-yyyy");
		return formater.format(dateFin.getTime());
	}
	
	@Override
	public String toString() {
		return "Projet [titreProjet=" + titreProjet + ", montantDemande="
				+ montantDemande + ", porteur=" + porteur + ", categorie="
				+ categorie + "]";
	}

	@Override
	public boolean equals(Object obj) {
		Projet projet = (Projet) obj;
		return projet.getIdProjet() == this.idProjet;
	}
}
