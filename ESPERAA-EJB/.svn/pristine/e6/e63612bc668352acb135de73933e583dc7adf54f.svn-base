package facade;

import java.util.List;

import javax.ejb.Local;

import dto.AUtilisateurDTO;
import dto.CategorieDTO;
import dto.FinanceurPorteurDTO;
import dto.ProjetDTO;
import dto.TousLesProjetsDTO;

@Local
public interface IFacadeCommune {

	/**
	 * Rï¿½cupï¿½re le projet ï¿½ partir de son id
	 * @param idProjet l'id du projet
	 * @return le projet ayant un id ï¿½gal ï¿½ idprojet
	 */
	ProjetDTO findProjetById(int idProjet);
	
	/**
	 * Mï¿½thode de recherche d'un projet par son titre
	 * @param titreProjet
	 * @return la liste des projets correspondants au titre renseignï¿½ï¿½
	 */
	List<TousLesProjetsDTO> rechercherParTitre(String titreProjet);

	/**
	 * Mï¿½ï¿½ï¿½thode de recherche de projets par catï¿½ï¿½ï¿½gorie
	 * @param categorie
	 * @return la liste des projets correspondants ï¿½ï¿½ï¿½ la catï¿½ï¿½ï¿½gorie renseignï¿½ï¿½ï¿½e
	 */
	List<TousLesProjetsDTO> rechercherParCatgeorie(String categorie);
	
	/**
	 * Rechercher des projets par un ou plusieurs tag
	 * @param tagString les tags
	 * @return liste de projets
	 */
	List<ProjetDTO> rechercherParTag(String tagString);

	/**
	 * Mï¿½thode de recherche de projets par porteur
	 * @param nomPorteur
	 * @returnla liste des projets correspondants au nom de porteur renseignï¿½
	 */
	List<TousLesProjetsDTO> rechercherParPorteur(String nomPorteur);

	/**
	 * Mï¿½thode de recherche de projet par titre et catï¿½gorie
	 * @param titreProjet
	 * @param categorie
	 * @return liste des projets correspondants aux infos renseignï¿½es
	 */
	List<TousLesProjetsDTO> rechercherParTitreCatgeorie(String titreProjet, String categorie);	
	
	/**
	 * Mï¿½thode de recherche de projet par titre et nom
	 * @param titreProjet
	 * @param nomPorteur
	 * @return liste des projets correspondants aux infos renseignï¿½es
	 */
	List<TousLesProjetsDTO> rechercherParTitreNom(String titreProjet, String nomPorteur);
	
	/**
	 * Mï¿½thode de recherche de projet par categorie et porteur
	 * @param categorie
	 * @param nomPorteur
	 * @return liste des projets correspondants aux infos renseignï¿½es
	 */
	List<TousLesProjetsDTO> rechercherParCatgeorieNom(String categorie, String nomPorteur);
	
	/**
	 * Mï¿½thode de recherche de projet par titre, catï¿½gorie et porteur
	 * @param titreProjet
	 * @param categorie
	 * @param nomPorteur
	 * @return liste des projets correspondants aux infos renseignï¿½es
	 */
	List<TousLesProjetsDTO> rechercherParTitreCatgeorieNom(String titreProjet, String categorie, String nomPorteur);

	/**
	 * Mï¿½thode de chargement du nom des catï¿½gories
	 * @return la liste des noms des catï¿½gories
	 */
	List<String> getAllCategoriesNames();
	
	/**
	 * Recuperer une liste contenant tous les projets de la BDD
	 * @return ArrayList de tous les projets
	 */
	List<TousLesProjetsDTO> recupererTousLesProjets();
	
	/**
	 * Rï¿½cupï¿½rer une liste contenant les titres de tous les projets
	 * @return ArrayList de tous les projets
	 */
	List<String> recupererTousLesTitresDesProjets();
	
	/**
	 * Recuperer une liste contenant tous les projets en avant de la BDD
	 * @return ArrayList de tous les projets en avant
	 */
	List<TousLesProjetsDTO> recupererProjetsEnAvant();
	
	/**
	 * Recuperer tous les noms des financeurs porteurs dans une liste
	 * @return une array liste contenant tous les noms de financeurs porteurs
	 */
	List<String> recupererTousLesNomsDeFinanceurs();
	
	/**
	 * Recuperer la liste de tous les tags
	 * @return
	 */
	List<String> recupererTousLesTag();
	
	/**
	 * Connexion, renvoie null si l'utilisateur n'existe pas
	 * Renvoie un Administrateur ou un FinanceurPorteur selon l'utilisateur
	 * @return AUtilisateur Administrateur ou FinanceurPorteur
	 */
	AUtilisateurDTO connexion(String login, String mdp);

	ProjetDTO findProjetDTOById(int idProjet);

	List<CategorieDTO> findAllCategorieDto();

	FinanceurPorteurDTO findFinanceurDTOByLogin(String login);

	/**
	 * Fonction d'abandon d'un projet, rembourse tous les financeurs
	 * @param idProjet projet à cloturer
	 * @param admin l'utilisateur est il administrateur?
	 */
	void cloturerProjet(int idProjet, boolean admin);
	
	/**
	 * Un utilisateur envoie un messge (commentaire) sur un projet
	 * @param nomEmetteur Nom de l'utilisateur
	 * @param idProjet id du projet
	 * @param contenuMessage contenu du message
	 */
	void envoyerMessage(String nomEmetteur, int idProjet, String contenuMessage);

	/**
	 * Un utilisateur repond a un message (commentaire) deja poste par un autre utilisateur (ou lui meme)
	 * @param nomEmetteur nom de l'utilisateur
	 * @param idConversation id de la conversation
	 */
	void repondreMessage(String nomEmetteur, int idConversation, String contenuReponse, int idProjet);
	
	/**
	 * Un utilisateur supprime un de ses messages ou un administrateur supprime un message
	 * @param idMessage
	 * @param idConversation
	 * @param idProjet
	 * @param admin
	 */
	void supprimerMessage(int idMessage, int idConversation, int idProjet, boolean admin);
}