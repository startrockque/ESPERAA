package dao;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import dto.TousLesProjetsDTO;
import entities.FinanceurPorteur;
import entities.Projet;
import entities.Tag;

/**
 * Class inspirï¿½ d'open class room
 */
@Stateless
public class ProjetDAO {

	@PersistenceContext( unitName = "monUnite" )
	private EntityManager     em;

	@EJB
	private TagDAO            tagDao;
	@EJB
	private TrancheDAO        trancheDao;
	@EJB
	private InvestissementDAO investissementDao;
	@EJB
	private FinanceurDAO      membreDao;

	/**
	 * Créer un Projet dans la BDD
	 * @param obj
	 * @throws DAOException
	 */
	public void create( Projet obj ) throws DAOException {
		try {
			em.persist( obj );
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Supprimer un projet de la BDD
	 * @param obj
	 * @throws DAOException
	 */
	public void delete( Projet obj ) throws DAOException {
		try {
			for ( Tag tag : obj.getTagList() ) {
				tagDao.findByName( tag.getTag() ).getProjeList().remove( obj );
			}
			em.remove( em.merge( obj ) );
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver un projet par sa clé
	 * @param id
	 * @return
	 * @throws DAOException
	 */
	public Projet findById( int id ) throws DAOException {
		try {
			return em.find( Projet.class, id );
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver tous les projets de la BDD
	 * @return
	 * @throws DAOException
	 */
	public List<Projet> findAll() throws DAOException {
		try {
			TypedQuery<Projet> query = em.createQuery( "SELECT p FROM Projet p ORDER BY p.idProjet", Projet.class );
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver les titres de tous les projets de la BDD
	 * @return
	 */
	@SuppressWarnings( "unchecked" )
	public List<String> findAllTitles() throws DAOException {
		try {
			return em.createQuery( "SELECT p.titreProjet FROM Projet p ORDER BY p.titreProjet" ).getResultList();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver les projets mis en avant par l'admin
	 * @return
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findEnAvant() throws DAOException{
		try {
			return em.createQuery( "SELECT p FROM Projet p WHERE p.enAvant=true ORDER BY p.idProjet" ).getResultList();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver tous les projets dont le titre contient la chaine de caractères passée en paramètre
	 * @param titre
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findAllByTitre( String titre ) throws DAOException {
		try {
			String ejbql = "SELECT p FROM Projet p WHERE p.titreProjet LIKE :pattern ORDER BY p.idProjet";
			Query query = em.createQuery( ejbql );
			query.setParameter( "pattern", "%" + titre + "%" );
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver les projets d'une catégorie
	 * @param categorie
	 * @return
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByCategorie( String categorie ) throws DAOException{
		try {
			Query query = em.createQuery( "SELECT p FROM Projet p WHERE p.categorie.titreCategorie=?1 ORDER BY p.idProjet" );
			query.setParameter( "1", categorie );
			return query.getResultList();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver les projets d'un utilisateur
	 * @param nomPorteur
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByPorteurLogin( String nomPorteur ) throws DAOException {
		try {
			String ejbql = "SELECT p FROM Projet p WHERE p.porteur.nom LIKE :pattern ORDER BY p.idProjet";
			Query query = em.createQuery( ejbql );
			query.setParameter( "pattern", "%" + nomPorteur + "%" );
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver tous les projets par titre et Categorie
	 * @param titreProjet
	 * @param categorie
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByTitreCategorie( String titreProjet, String categorie ) throws DAOException {
		try {
			String ejbql = "SELECT p FROM Projet p WHERE p.titreProjet LIKE :pattern AND p.categorie.titreCategorie=?1 ORDER BY p.idProjet";
			Query query = em.createQuery( ejbql );
			query.setParameter( "pattern", "%" + titreProjet + "%" );
			query.setParameter( "1", categorie );
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver tous les projets par titre et nom de porteur
	 * @param titreProjet
	 * @param nomPorteur
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByTitreNom( String titreProjet, String nomPorteur ) throws DAOException {
		try {
			String ejbql = "SELECT p FROM Projet p WHERE p.titreProjet LIKE :pattern AND p.porteur.nom LIKE :pattern2 ORDER BY p.idProjet";
			Query query = em.createQuery( ejbql );
			query.setParameter( "pattern", "%" + titreProjet + "%" );
			query.setParameter( "pattern2", "%" + nomPorteur + "%");
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver par Categorie et nom de porteur
	 * @param categorie
	 * @param nomPorteur
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByCategorieNom( String categorie, String nomPorteur ) throws DAOException {
		try {
			String ejbql = "SELECT p FROM Projet p WHERE p.categorie.titreCategorie=?1 AND p.porteur.nom LIKE :pattern ORDER BY p.idProjet";
			Query query = em.createQuery( ejbql );
			query.setParameter( "pattern", "%" + nomPorteur + "%" );
			query.setParameter( "1", categorie );
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver par titre exact
	 * @param titreProjet
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public Projet findByTitre( String titreProjet ) throws DAOException {
		try {
			Query query = em.createQuery( "SELECT p FROM Projet p WHERE p.titreProjet=?1" );
			query.setParameter( "1", "%" + titreProjet + "%" );
			List<Projet> projetList = query.getResultList();
			if ( !projetList.isEmpty() ) {
				return projetList.get( 0 );
			} else {
				return null;
			}
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver par titre, Categorie et nom du porteur
	 * @param titreProjet
	 * @param categorie
	 * @param nomPorteur
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByTitreCategorieNom( String titreProjet, String categorie, String nomPorteur ) throws DAOException {
		try {
			String ejbql = "SELECT p FROM Projet p WHERE p.titreProjet LIKE :pattern AND p.categorie.titreCategorie=?1 AND p.porteur.nom LIKE :pattern2 ORDER BY p.idProjet";
			Query query = em.createQuery( ejbql );
			query.setParameter( "pattern", "%" + titreProjet + "%" );
			query.setParameter( "1", categorie );
			query.setParameter( "pattern2", "%" + nomPorteur + "%" );
			return query.getResultList();
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Trouver les projets par un Tag    
	 * @param stringTab
	 * @return
	 */
	public List<Projet> findByTag( String[] stringTab ) throws DAOException{
		List<Projet> projetTag = new ArrayList<Projet>();
		try {
			List<Tag> tagsList = new ArrayList<Tag>();
			Tag tag;
			for ( String nomTag : stringTab ) {
				tag = tagDao.findByName( nomTag );
				if ( tag != null ) {
					tagsList.add( tag );
				}
			}
			if ( !tagsList.isEmpty() ) {
				List<Projet> allProjets = findAll();
				for ( Projet p : allProjets ) {
					projetTag.add( p );
					for ( Tag t : tagsList ) {
						if ( p.getTagList() == null || ( !p.getTagList().contains( t ) ) ) {
							projetTag.remove( p );
						}
					}
				}
			}
		} catch (Exception e) {
			throw new DAOException(e);
		}
		return projetTag;
	}

	/**
	 * Trouver les projets d'un membre
	 * @param loginPorteur
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findByLoginPorteur( String loginPorteur ) throws DAOException {
		try {
			FinanceurPorteur membre = membreDao.findByLogin( loginPorteur );
			Query query = em.createQuery( "SELECT p FROM Projet p WHERE p.porteur=?1" );
			query.setParameter( "1", membre );
			List<Projet> projetList = query.getResultList();
			if ( !projetList.isEmpty() ) {
				return projetList;
			} else {
				return new ArrayList<Projet>();
			}
		} catch ( Exception e ) {
			throw new DAOException( e );
		}
	}

	/**
	 * Met un projet en avant
	 * @param idProjet
	 * @throws DAOException
	 */
	public void mettreEnAvant( int idProjet ) throws DAOException {
		try {
			Query query = em.createQuery( "UPDATE Projet p SET p.enAvant=true WHERE p.idProjet=?1" ).setParameter( 1,
					idProjet );
			query.executeUpdate();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Met un projet en arrière s'il était en avant
	 * @param idProjet
	 * @throws DAOException
	 */
	public void mettreEnArriere( int idProjet ) throws DAOException {
		try {
			Query query = em.createQuery( "UPDATE Projet p SET p.enAvant=false WHERE p.idProjet=?1" ).setParameter( 1, idProjet );
			query.executeUpdate();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouve les nbProjet derniers projets créés
	 * @param nbProjet nombre de projets à retourner
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findLastProjects( int nbProjet ) throws DAOException {
		try {
			String ejbql = "SELECT p "
					+ "FROM Projet p "
					+ "ORDER BY p.dateCreation DESC ";
			Query query = em.createQuery( ejbql );
			query.setMaxResults( nbProjet );
			return query.getResultList();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver les nbProjets les plus proches d'être financés
	 * @param nbProjet
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findAlmostFinancedProjects( int nbProjet ) throws DAOException {
		try{
			String sql =
					"SELECT IDPROJET FROM "
							+ "(SELECT IDPROJET , MONTANTINVESTI  , (p.MONTANTINVESTI *10000 /p.MONTANTDEMANDE) as nb "
							+ "FROM PROJET p "
							+ "WHERE p.MONTANTINVESTI *10000 /p.MONTANTDEMANDE < 10000 "
							+ "ORDER BY (nb) "
							+ "DESC LIMIT ?1)";
			Query query = em.createNativeQuery( sql );
			query.setParameter( 1, nbProjet );
			List<Integer> intList = query.getResultList();
			return recupererProjetDepuisListId( intList );
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver les projets les plus financés
	 * @param nbProjet
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findMostFinancedProjets( int nbProjet ) throws DAOException {
		try {
			String sql =
					"SELECT IDPROJET FROM "
							+ "(SELECT IDPROJET , MONTANTINVESTI  , (p.MONTANTINVESTI *10000 /p.MONTANTDEMANDE) as nb "
							+ "FROM PROJET p "
							+ "ORDER BY (nb) "
							+ "DESC LIMIT ?1)";
			Query query = em.createNativeQuery( sql );
			query.setParameter( 1, nbProjet );
			List<Integer> intList = query.getResultList();
			return recupererProjetDepuisListId( intList );
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver des projets depuis une liste de clés
	 * @param ids
	 * @return
	 * @throws DAOException
	 */
	public List<Projet> recupererProjetDepuisListId( List<Integer> ids ) throws DAOException {
		try {
			List<Projet> listProjets = new ArrayList<Projet>();
			for ( int i : ids ) {
				listProjets.add( findById( i ) );
			}
			return listProjets;
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver les nbProjet les plus aimés
	 * @param nbProjet nombre de projets à retourner
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings( "unchecked" )
	public List<Projet> findMostLikedProjects(int nbProjet) throws DAOException{
		try {
			String sql = "SELECT PROJET_IDPROJET FROM "
					+ "(SELECT PROJET_IDPROJET ,COUNT(PROJET_IDPROJET) AS nb "
					+ "FROM AIME "
					+ "GROUP BY PROJET_IDPROJET "
					+ "ORDER BY nb DESC "
					+ "LIMIT ?1)";
			Query query = em.createNativeQuery( sql );
			query.setParameter( 1, nbProjet );
			List<Integer> intList = query.getResultList();
			return recupererProjetDepuisListId( intList );
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver le nombre de likes sur un projet
	 * @param idProjet
	 * @return
	 */
	public int howManyLikeOnProject(int idProjet) throws DAOException {
		try {
			String sql = 
					"SELECT COUNT(*) "
							+ "FROM AIME WHERE PROJET_IDPROJET = ?1";
			Query query = em.createQuery(sql);
			query.setParameter(1, idProjet);
			return (int) query.getResultList().get(0);
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver le nombe de projets dans la BDD
	 * @return
	 * @throws DAOException
	 */
	public int getSize() throws DAOException{
		try {
			String sqlString = "SELECT COUNT(*) FROM PROJET";
			Query query = em.createNativeQuery( sqlString );
			return ((BigInteger) query.getResultList().get(0)).intValue();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}

	/**
	 * Trouver tous les projets qui n'ont pas dépassé la date de fin
	 * @return
	 * @throws DAOException
	 */
	@SuppressWarnings("unchecked")
	public List<Projet> findAllEnCours() throws DAOException{
		try {
			String sql =  "SELECT p FROM Projet p WHERE p.dateFin > CURRENT_TIMESTAMP";
			Query query = em.createQuery(sql);
			return query.getResultList();
		} catch (Exception e) {
			throw new DAOException(e);
		}
	}
}